<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AABifZ0bZX+gP3aPriMAAAAAAAAAAAAAAAAAAAAAAAAABgBYAGMAsgD+AK8A/wCwCf8AuSH/AMI4/wCs
        Of///////////wCsOv8Awjv/ALok/wCxC/8ArwD/ALIA/gBZAGIAAAAHAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAJEAswCwAP8AtAL/ALwa/wDG
        N/8Az1P/AKxJ////////////AK1L/wDQVv8AyDv/AL4d/wC1A/8AsAD/AJEAswAAAA8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAnwDkALQA/wCr
        Bv8AlRb/AJsq/wCgPf8Aizf///////////8Aizj/AKFA/wCbLP8Alhn/AKwI/wC0AP8AoQDkAAAAFQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQCg
        APsAtAD/AIwE//////////////////////////////////////////////////////8AjAb/ALUA/wCj
        APsAAAAVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAPAJoA+gCyAP8AiwT//////////////////////////////////////////////////////wCM
        Bv8AswD/AJ0A+gAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAYAkQDfAK4A/wKtB/8QmiT/FJ83/xSkSP8OjTz///////////8OjT7/FKRK/xSg
        Ov8Qmyb/Aq0J/wCuAP8AlADeAAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQCJAJ4ApAD/KMUq/z7SUf8+2Wb/Pt57/yu1Yf///////////yu2
        Yv8+333/Ptpp/z7TU/8oxSv/AKQA/wCKAJ4AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH8ANgCVAP4fux//XtZi/17bcf9e33//SMBq////
        ////////SMBr/17fgf9e3HP/Xtdk/x+6H/8AlQD+AH8ANgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIoAngGfAf9dz13/ft6B/33h
        iv9qzHv///////////9qzHv/feGL/37fgv9d0F3/AZ8B/wCJAJ4AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAKAI0Awwqi
        Cv921Hb/neWd/5bgmf+O2JL/jtiS/5bgmv+d5Z7/dtR2/wqiCv8AjQDDAHwACgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAhAAKAIwAnAKWAv5FukX/itiK/6zlrP+s5az/itiK/0W6Rf8ClgL+AIsAnACHAAoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAIsAMgCNAJgAlADaAJgA+QCYAPoAlADbAI4AmACKADIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgACABwAAAAAAAAAAAAAAAAAAAACAAAABwAEAAfAHgAP8H/gf/B/4H/wP
        8B/4D/Af8AfgH/AH4B/wB8AP8AcAA/AHAAP4DgAB+AwAAP48AAD//AAA//wAAP/8AAD//AAA//wAAP/8
        AAD//gAB//8AA///AAP//4AH///gH/////8=
</value>
  </data>
</root>