<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAEeY0zBFlNBAQY7KYD+Kx4A8hcOAOYC/gDZ7uoAzdrZwMHGyQC1s
        rkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFax6BBUreVQUajgn02j3M9Lntj/V6bc/1il2/9apdr/Zqzg/2Om3P9fn9j/VpTP/0WC
        wv9BfL3/LWyu/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAF288kBauO2fXbbr/3XD7/+DzPP/i9P4/5Tb/v+O2P7/i9X9/4jS+/96xvf/dr7z/3G0
        7v91r+r/c6bl/3Gb3/8tbK7/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAGPG+iBgwva/acT0/43W+P+j4/3/l978/4vY/P990/z/bcz8/2LH/P9Ywfz/Vrz5/1Kz
        9P9NqO//R5zo/0CN4f9Jidz/dZ3g/y1srv8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAABly/4wY8f775Lb+/+k5fz/ld78/4TY/P910vz/bc78/2bK/P9fxvz/WcL8/1S+
        +/9Sufj/TrD0/0mm7v9Emuj/P43g/1CO3v91neD/LWyu/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAGbM/9+d4/3/neP7/4vc+/991/v/d9P7/3DP+/9qzPv/ZMj7/13E
        +/9Wwfv/Ur37/1C4+P9Mr/P/SKXu/0OZ6P9HkuL/UY7e/3Wd4P8tbK7/4Klvn6diJv+SRQf/mkwOv6FT
        FJ+oWRpgrl8gIAAAAAAAAAAAAAAAAAAAAAAAAAAAZsz//6vp/P+O3/v/gtr7/3zW+/910/v/b8/7/2jL
        +/9ix/v/XMP7/1XA+/9Svfv/VLr5/1Kz9f9Lp+//TKDq/0qU4/9Rjt7/dZ3g/y1srv/rvYf/259k/8eA
        Rf/Ef0f/wHlA/7pwNP+2aCr/t2gnz79uLnDEczIQAAAAAAAAAABmzP//sOv9/4ze+/+B2fv/gdn8/3zW
        /P991/3/ddP9/33V/v+R2/7/mN3//6/k//+s4f3/qNv7/5LN9v+Xy/T/pc70/6jN8/+awO3/P4jA//7c
        q//ZmVv/uWEb/8RyMf/NgET/1pBZ/9yZYv/ZlFv/zoJF/8Z2Ne/MezpgAAAAAGbM///H9f//ru///6Pr
        //+h6P//vO3//9v1///w+////v////3+///7/v//4ff//931///X9P//vOj9/8Dq/v/D7P//uej//5jT
        8f+Wvcb//tmn/9iWV/+zUwj/uloQ/8FiGf/IaSH/0307/92PUv/mn2j/5Jpf/9SERP/TgkCAZsz//8r2
        //+88v//3ff////////7////5/3//9f5///E9f//qe3//6Hq//+a5v//kuL//4ve//920/3/dtT+/3fU
        //9oxPH/gbjM//7XpP/+16T/2JVW/7NSB/+6WRD/wWEY/8hpIf/PcSn/1nky/96EQP/pnF//651e/9WE
        Qv9tz///3vr///v+///y////3P///8b8//+++P//tvT//67w//+m7P//nuj//5bk//+P4f//iN3//3TS
        /f900v7/asXx/3a1z//z1KX//tai//7Wov/YlFX/s1EH/7pZEP/BYRj/yGgg/89wKf/WeDL/3YA6/+WN
        Sv/voGH/1YRC/4Tb/v/5////3P///8z////K/v//w/r//7r2//+y8v//qu7//6Pq//+b5v//lOP//4zf
        //+F3P//dNL9/2fD8P9xrMX/9Nux//3Wov/91aH//dWj/+2/lP/WlF//0odN/8x1NP/IaCD/z3Ap/9Z4
        Mf/dfzn/5YxJ/++iZP/VhEL/it39/9z////M////zP///8f9//+/+f//t/X//6/x//+n7f//n+n//5jl
        //+D1fb/fdL2/3DH7v9pwuz/U63O/9epdv//4rX//+Cx//3Wo//72rf/+tOu//nOpf/40az/+M2p//TB
        l//noWv/34xM/91/Of/lj0z/8Khs/9WEQv+H2vvvp+r7/7jz/P+28fv/muD1/5Tc8/+Aze3/dsbp/23A
        5f9WtMz/TbO5/0yyuP89tJX/PbSU/zO3e/8hrk3/4Klv///itf//4rX//ejN//rSqf/3uHz/9bF0//Sq
        bP/yqGv/86tz//Oyfv/0u43/8rJ//+ygY//wqW3/1YRC/4PX+EB/0vW/W8S1/1PKqv9Rx6j/QciH/0DH
        hv80yGz/L8dh/yvDW/8qwVn/J75V/ye+Vf8nvlX/J75V/x2zP//gqW///+K1//7qzf/94sL/+sqU//e6
        f//1s3f/9K9x//Opav/ypGP/8Z5c//CeXf/yqnH/8653//Gna//Wh0j/AAAAAAAAAAAZsTL/M8tn/zPL
        Z/8zy2f/M8tn/zPLZ/8zy2f/M8tn/zPLZ/8zy2f/M8tn/zPLZ/8zy2f/Jr9N/+Ona///68///urR//vS
        ov/6ypb/+L6F//a5f//2tXr/9K1w//KmZv/xnlz/8JxZ//CcWf/wnl3/8aJj/9aLUP8AAAAAAAAAABmx
        Mv8zy2f/M8tn/zPLZ/8zy2f/M8tn/1XYgP9a2IT/Yt6M/3vln/945Z3/j/Gw/5jvtv+T6q7/6qNj//vZ
        t//92Kn/+9Ge//rKlv/4voX/9rl///a1ev/0rXD/8qZm//GeXP/wnFn/8JxZ//CcWf/vnFr/1otQ/wAA
        AAAAAAAATM9v/63uvv+58sj/wvXO/9//5P/X/+D/x//V/8D/0f+q/8T/m/+8/43+s/96/Kb/dvii/1/y
        kf9x3H//5qFc//fAiP/70Z7/+sqW//i+hf/2uX//9rV6//StcP/ypmb/8Z5c//CcWf/wnFn/7ptY/96Q
        U//Wi1CfAAAAAAAAAABd2YOAbN2P75nsrv+0+r//tf/B/6r/vP+e/7b/kP6v/4P+qP9z/qH/Z/6a/2T8
        mP9f95P/WvKO/1Prh/9g2nr/zaZe//O0ev/6ypb/+L6F//a6gP/2tXr/9K1w//KmZv/xnlz/7ZpY/+OU
        Vf/YjFH/1otQjwAAAAAAAAAAAAAAAAAAAABd2YMQXdmDcF3Zg89o3ov/eeeY/4Dun/+C9KP/evag/3P+
        of9n/pr/ZPyY/1/3k/9a8o7/U+uH/0vjf/9O13X/yKNb/+6pbf/4wor/97uC//Oxdf/spGf/5ppc/92Q
        U//Wi1Dv1otQj9aLUCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF3ZgxBd2YNQW9eBgFjV
        f69W032/VNF7/1LPef9PzXf/Tct1/0vJc/9Jx3H/RsRv/0TCbf9CwGv/p6Rd/+OTVP/hklT/3pBTz9yP
        Uq/ajlFw2IxRMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////wA//+AAP/+AAD/+AAA//AAAP/wAA
        AB8AAAADAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAwAAAAMAAAADAAAAB4AAAA/wA
        AB////////////////////////////////8=
</value>
  </data>
</root>