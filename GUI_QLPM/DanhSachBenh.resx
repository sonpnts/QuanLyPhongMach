<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOjo4y7n4dyb6+nkatra
        2gcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMzMwF5d/YyObh
        2v/y7+z/8/LvufLu7j8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAODd
        0kvj3db/9PHu//v5+f/59/b/+PXz//Tx8Kvw8OszAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA4t3VtOnk3v/6+Pf/+ff2//n39v/59/b/+ff2//b08vnz8e6c8fHrJwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAmJiY7RUVF4REREdAAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAOHb1Svi3NT68e7r//r4+P/59/b/+ff2//n39v/59/b/+ff3//n39v/29PLy9PDujezs
        7BsAAAAAAAAAAAAAAAAAAAAALCwsNFJSUuYfHx//CgoK/wQEBOIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA4t3Vj+fh2v/49vX/+ff2//n39v/59/b/+ff2//n39v/59/b/+ff2//n3
        9//59/b/9fPx6vTw7n7x8fETAAAAADQ0NCxXV1fhKioq/xISEv8ODg7/BQUFwQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAOLU1BLi29Tp7urm//r5+P/59/b/+ff2//n39v/59/b/+ff2//n3
        9v/59/b/+ff2//n39v/59/f/+ff1//Xz8eG/vbuEYWFh3jQ0NP8bGxv/FxcX/w0NDcoAAAAZAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4d3VaeTe2P/28/L/+vj3//n39v/59/b/+ff2//n3
        9v/59/b/+ff2//n39v/59/b/+ff2//n39v/59/b/4d/e/39+fv8+Pj7/JCQk/yAgIP8XFxfLCQkJGwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+/vwTi3NPP6+bh//r4+P/59/b/+ff2//n3
        9v/59/b/+ff2//n39v/e7eD/wuTJ/7zkxf/O6tT/8vXw/+Xo5P+IgYX/SUlJ/y0tLf8pKSn/PDw89q+t
        qmcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4d3VROTd1v/08e7/+vj4//n3
        9v/59/b/+ff2//n39v+24MD/a82F/0PJav8+zGf/Ps5n/0DOaf9X1Xv/b7eE/1JVUv82MjX/MTIx/0xM
        TP/b2tr/+Pb0//Tx7r3z8OxEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADi29Wt6OPd//n3
        9v/59/b/+ff2//n39v/r8ur/ec2P/zzIY/8+0Gn/Ps9p/z7OaP8+zmj/Ps5o/z7PaP881Wn/Pald/ztC
        Pf9NRUv/2tfX//n39v/59/b/+ff2//f19P/08e6v8/PtLAAAAAAAAAAAAAAAAAAAAAAAAAAA3d3WJuLc
        1Pjw7er/+vj4//n39v/59/b/7vPt/2vJgv8/zWn/SNh+/0DQbP9N0XP/dNqR/3zcl/9g1oL/Ps5o/z7P
        af8+2Gv/TKZl/9fc1//59/b/+ff2//n39v/59/b/+ff2//n39v/29fS9AAAAAAAAAAAAAAAAAAAAAAAA
        AADi3dWI5uDa//j29P/59/b/+ff2//n39v+T1KP/Pcpm/1Phmv9L2Yf/f9yZ/+Py5f/59/b/+ff2//T2
        8v+u4Lr/Pclm/z7Paf9G02//3PHg//n39v/59/b/+ff2//n39v/59/b/+ff2//f19YMAAAAAAAAAAAAA
        AAAAAAAA3d3MD+Lc1Obu6eX/+vj4//n39v/59/b/5/Hn/0rCaf9O3Y7/WOWm/3ncl//09vL/+ff2//n3
        9v/59/b/+ff2//n39v+I0pv/Psxn/z7Paf+p5rn/+ff2//n39v/59/b/+ff2//n39v/49vXt8/PzFwAA
        AAAAAAAAAAAAAAAAAADi3dVi5N7X//bz8f/6+Pf/+ff2//n39v+k2bD/Qs5y/1zpr/9f3JT/6vTr//n3
        9v/59/b/+ff2//n39v/59/b/+ff2/+Hu4v9Dw2f/PtBp/5Hgp//59/b/+ff2//n39v/59/b/+ff2//f1
        9YoAAAAAAAAAAAAAAAAAAAAAf39/AuHc1snq5uD/+vj3//n39v/59/b/+ff2/13Edv9N3I3/XOiv/5Xj
        rv/59/b/+ff2//n39v/59/b/+ff2//n39v/59/b/9PXy/1DDcP8+zmj/kOCm//n39v/59/b/+ff2//n3
        9v/49vXy9vbuHgAAAAAAAAAAAAAAAAAAAADNpGI+497X//Tz9P/6+Pj/+ff2//n39v/59/b/Qb9j/1Ph
        mf9Z5af/sOe///n39v/59/b/+ff2//n39v/59/b/+ff2//n39v/o8ej/RL9m/z7OaP+m5bf/+ff2//n3
        9v/59/b/+ff2//j29JYAAAAAAAAAAAAAAAAAAAAAAAAAALt+D6fRq2X/9/Ho//v9///6+///+fj3//n3
        9v9Lwmr/UuCY/1jkpf+c47D/+ff2//n39v/59/b/+ff2//n39v/59/b/+ff2/6nbtf88w2H/QdFr/9jw
        3f/59/b/+ff2//n39v/49vX3+PHxJQAAAAAAAAAAAAAAAAAAAAC5gxchvoUd9cyPGf/bozP/5cB5//Lk
        yv/6+fv/+/z//4zVnv9M2on/Wueq/1zWgf/s9Oz/+ff2//n39v/59/b/+ff2//n39v/W69n/S75q/z7N
        Z/9+3Zn/+ff2//n39v/59/b/+ff2//j19aEAAAAAAAAAAAAAAAAAAAAAAAAAAL6FHYLBiB7/1Zoj/9ea
        Hv/VlRb/1pog/9+xVP/s1Kb/1+jR/0XNcf9Z5qf/R9Z8/27Uif/X69r/+Pb1//n39v/v8+7/sd27/02+
        bP89yWb/UtN4/+Hy5P/59/b/+ff2//n39v/49vX68/PzLgAAAAAAAAAAAAAAAAAAAAAAAAAAvoUd4MqQ
        IP/YnCP/15sj/9ebI//XmiL/1pcZ/9WWF//apDf/lMFu/0jXf/9R35T/P89q/0TKaf9oy4P/bsqH/1PD
        cv87wmH/Pc1n/1TUev/N7dX/+ff2//n39v/59/b/+ff2//f29KwAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAC+hR3s0pci/9icI//XmyP/15sj/9ebI//XmyP/15sj/9aZHv/VlRb/kLNC/0/Sdv9D03X/Ps9o/z7P
        aP8+zmj/Ps5o/z/Qav973Jb/3vHh//n39v/59/b/+ff2//n39v/49vX+9fX1NwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAL6FGkPNkyC115si9tebI//XmyP/15sj/9ebI//XmyP/15sj/9ebI//XmiH/vZ8l/4iz
        Qf9VyGH/SM5q/1PRdP+R4qr/z/Hb//n4+f/59/b/+ff2//n39v/59/b/+ff2//f29bYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADUmxwk1ZkgdNaaIsnXmyP/15sj/9ebI//XmyP/15sj/9eb
        I//XmyP/15sj/9aYHf/VlRb/15wl/+G2Yf/u2rP/+PXx//v9///6+vz/+ff2//n39v/59/b/9/PzQQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANOZITXWmiGJ1poh2teb
        I//XmyP/15sj/9ebI//XmyP/15sj/9ebI//XmiH/1ZYY/9WXGf/cqEH/6MmN//Tr2v/7+///+/z///n4
        +cEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAC/fx8I1ZkiSdaZIZ/WmiLo15sj/9ebI//XmyP/15sj/9ebI//XmyP/15sj/9aYHP/VlRb/2J0p/+K5
        Zv/w3bv/9O7jSwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAM6RGBXVmCFc1Zkis9aaIvTXmyP/15sj/9ebI//XmyP/15sj/9eb
        I//XmiD/1ZYY/9WXHMuqVQADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA05kdI9aZIXHVmSLH1poi/teb
        I//XmyP/15sj/9ebI//XmyP/1pkfWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADWmR4y1Zoih9aaItjXmyP/15sj/9WaIdPMmQAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA1JQfGNaZIWTWmiKd1ZohPQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////+H////A////wD///8AP4f+AA8H/gACB/wAAAf8AAAP+AAAH/gA
        AAf4AAAB8AAAAfAAAAHgAAAB4AAAA8AAAAPAAAAHwAAAB4AAAA+AAAAPgAAAH4AAAB+AAAA/4AAAP/wA
        AH//AAB//+AAf//8AP///4D////h//////8=
</value>
  </data>
</root>